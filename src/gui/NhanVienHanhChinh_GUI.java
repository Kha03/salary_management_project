package gui;

import com.toedter.calendar.JDateChooser;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;
import dao.NhanVienHanhChanh_Dao;
import dao.PhongBan_Dao;
import dao.CapBac_Dao;
import entity.PhongBan;
import entity.BacLuong;
import entity.CapBac;
import entity.NhanVienHanhChanh;
import connect.ConnectDB;
import java.awt.event.KeyEvent;
import java.sql.SQLException;
import java.text.DecimalFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.List;
import javax.swing.DefaultListModel;
import javax.swing.JComboBox;
import javax.swing.JComponent;
import javax.swing.JOptionPane;
import javax.swing.JTextField;

/**
 *
 * @author ADMIN
 */
public class NhanVienHanhChinh_GUI extends javax.swing.JPanel {

    /**
     * Creates new form NhanVienHanhChinh
     */
    public NhanVienHanhChinh_GUI() throws SQLException {
        initComponents();
        setTable();
        initCommon();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        lstPhongBan = new javax.swing.JList<>();
        jScrollPane2 = new javax.swing.JScrollPane();
        tblNhanVien = new javax.swing.JTable();
        jPanel1 = new javax.swing.JPanel();
        cmbCapBac = new javax.swing.JComboBox<>();
        cmbGioiTinh = new javax.swing.JComboBox<>();
        btnThem = new javax.swing.JButton();
        btnCapNhat = new javax.swing.JButton();
        btnLamMoi = new javax.swing.JButton();
        btnXoa = new javax.swing.JButton();
        txtDiaChi = new javax.swing.JTextField();
        txtMa = new javax.swing.JTextField();
        txtMail = new javax.swing.JTextField();
        txtTen = new javax.swing.JTextField();
        txtChucVu = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        txtDienThoai = new javax.swing.JTextField();
        txtNgoaiNgu = new javax.swing.JTextField();
        jLabel11 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        jLabel15 = new javax.swing.JLabel();
        cmbHeSoLuong = new javax.swing.JComboBox<>();
        jLabel16 = new javax.swing.JLabel();
        lblLuongCoSo = new javax.swing.JLabel();
        jLabel14 = new javax.swing.JLabel();
        lblLuongCoBan = new javax.swing.JLabel();
        cmbPhongBan = new javax.swing.JComboBox<>();
        jLabel17 = new javax.swing.JLabel();
        dchNgaySinh = new com.toedter.calendar.JDateChooser();
        dchNgayVaoLam = new com.toedter.calendar.JDateChooser();
        lblThongBao = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();

        setPreferredSize(new java.awt.Dimension(1366, 741));
        setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jScrollPane1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(59, 96, 59)));

        lstPhongBan.setForeground(new java.awt.Color(51, 51, 51));
        lstPhongBan.setSelectionBackground(new java.awt.Color(144, 237, 144));
        lstPhongBan.setSelectionForeground(new java.awt.Color(51, 51, 51));
        lstPhongBan.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                lstPhongBanMouseClicked(evt);
            }
        });
        lstPhongBan.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                lstPhongBanKeyReleased(evt);
            }
        });
        jScrollPane1.setViewportView(lstPhongBan);

        add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 43, 150, 250));

        jScrollPane2.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(59, 96, 59), 2), "Danh Sách Nhân Viên", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Segoe UI", 0, 12), new java.awt.Color(0, 99, 0))); // NOI18N

        tblNhanVien.setBackground(new java.awt.Color(184, 206, 224));
        tblNhanVien.setToolTipText("");
        tblNhanVien.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
        tblNhanVien.setSelectionBackground(new java.awt.Color(144, 237, 144));
        tblNhanVien.setSelectionForeground(new java.awt.Color(51, 51, 51));
        tblNhanVien.getTableHeader().setReorderingAllowed(false);
        tblNhanVien.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblNhanVienMouseClicked(evt);
            }
        });
        tblNhanVien.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                tblNhanVienKeyReleased(evt);
            }
        });
        jScrollPane2.setViewportView(tblNhanVien);

        add(jScrollPane2, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 292, 1300, 450));

        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        cmbCapBac.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        cmbCapBac.setForeground(new java.awt.Color(0, 99, 0));
        cmbCapBac.setEnabled(false);
        cmbCapBac.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbCapBacActionPerformed(evt);
            }
        });
        jPanel1.add(cmbCapBac, new org.netbeans.lib.awtextra.AbsoluteConstraints(835, 90, 190, -1));

        cmbGioiTinh.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        cmbGioiTinh.setForeground(new java.awt.Color(0, 99, 0));
        cmbGioiTinh.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Nam", "Nữ" }));
        cmbGioiTinh.setSelectedIndex(-1);
        cmbGioiTinh.setEnabled(false);
        jPanel1.add(cmbGioiTinh, new org.netbeans.lib.awtextra.AbsoluteConstraints(140, 130, -1, -1));

        btnThem.setBackground(new java.awt.Color(152, 249, 152));
        btnThem.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        btnThem.setIcon(new javax.swing.ImageIcon(getClass().getResource("/image/plus.png"))); // NOI18N
        btnThem.setText("Thêm");
        btnThem.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnThem.setDisabledIcon(null);
        btnThem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnThemActionPerformed(evt);
            }
        });
        jPanel1.add(btnThem, new org.netbeans.lib.awtextra.AbsoluteConstraints(640, 205, 130, 30));

        btnCapNhat.setBackground(new java.awt.Color(152, 249, 152));
        btnCapNhat.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        btnCapNhat.setIcon(new javax.swing.ImageIcon(getClass().getResource("/image/update.png"))); // NOI18N
        btnCapNhat.setText("Cập Nhật");
        btnCapNhat.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnCapNhat.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCapNhatActionPerformed(evt);
            }
        });
        jPanel1.add(btnCapNhat, new org.netbeans.lib.awtextra.AbsoluteConstraints(780, 205, 130, 30));

        btnLamMoi.setBackground(new java.awt.Color(152, 249, 152));
        btnLamMoi.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        btnLamMoi.setIcon(new javax.swing.ImageIcon(getClass().getResource("/image/reset.png"))); // NOI18N
        btnLamMoi.setText("Làm Mới");
        btnLamMoi.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnLamMoi.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLamMoiActionPerformed(evt);
            }
        });
        jPanel1.add(btnLamMoi, new org.netbeans.lib.awtextra.AbsoluteConstraints(920, 205, 120, 30));

        btnXoa.setBackground(new java.awt.Color(152, 249, 152));
        btnXoa.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        btnXoa.setIcon(new javax.swing.ImageIcon(getClass().getResource("/image/delete.png"))); // NOI18N
        btnXoa.setText("Xóa");
        btnXoa.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnXoa.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnXoaActionPerformed(evt);
            }
        });
        jPanel1.add(btnXoa, new org.netbeans.lib.awtextra.AbsoluteConstraints(1050, 205, 90, 30));

        txtDiaChi.setEditable(false);
        txtDiaChi.setForeground(new java.awt.Color(0, 96, 0));
        jPanel1.add(txtDiaChi, new org.netbeans.lib.awtextra.AbsoluteConstraints(140, 170, 530, -1));

        txtMa.setEditable(false);
        txtMa.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        txtMa.setForeground(new java.awt.Color(0, 96, 0));
        jPanel1.add(txtMa, new org.netbeans.lib.awtextra.AbsoluteConstraints(140, 10, 190, -1));

        txtMail.setEditable(false);
        txtMail.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        txtMail.setForeground(new java.awt.Color(0, 96, 0));
        jPanel1.add(txtMail, new org.netbeans.lib.awtextra.AbsoluteConstraints(480, 50, 190, -1));

        txtTen.setEditable(false);
        txtTen.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        txtTen.setForeground(new java.awt.Color(0, 96, 0));
        txtTen.setEditable(false);
        jPanel1.add(txtTen, new org.netbeans.lib.awtextra.AbsoluteConstraints(140, 50, 190, -1));

        txtChucVu.setEditable(false);
        txtChucVu.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        txtChucVu.setForeground(new java.awt.Color(0, 96, 0));
        jPanel1.add(txtChucVu, new org.netbeans.lib.awtextra.AbsoluteConstraints(835, 50, 190, -1));

        jLabel2.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel2.setText("Giới Tính:");
        jPanel1.add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 130, 80, -1));

        jLabel3.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel3.setText("Họ Và Tên:");
        jPanel1.add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 50, 120, -1));

        jLabel4.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel4.setText("Ngày Sinh:");
        jLabel4.setToolTipText("");
        jPanel1.add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 90, 120, -1));

        jLabel6.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel6.setText("Số Điện Thoại:");
        jPanel1.add(jLabel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(370, 10, 120, -1));

        jLabel7.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel7.setText("Ngày Vào Làm:");
        jPanel1.add(jLabel7, new org.netbeans.lib.awtextra.AbsoluteConstraints(370, 130, 120, -1));

        jLabel8.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel8.setText("Phòng Ban:");
        jPanel1.add(jLabel8, new org.netbeans.lib.awtextra.AbsoluteConstraints(370, 90, 120, -1));

        jLabel9.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel9.setText("Ngoại Ngữ:");
        jPanel1.add(jLabel9, new org.netbeans.lib.awtextra.AbsoluteConstraints(730, 10, 120, -1));

        jLabel10.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel10.setText("Cấp Bậc:");
        jPanel1.add(jLabel10, new org.netbeans.lib.awtextra.AbsoluteConstraints(730, 90, 100, -1));

        txtDienThoai.setEditable(false);
        txtDienThoai.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        txtDienThoai.setForeground(new java.awt.Color(0, 96, 0));
        jPanel1.add(txtDienThoai, new org.netbeans.lib.awtextra.AbsoluteConstraints(480, 10, 190, -1));

        txtNgoaiNgu.setEditable(false);
        txtNgoaiNgu.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        txtNgoaiNgu.setForeground(new java.awt.Color(0, 96, 0));
        jPanel1.add(txtNgoaiNgu, new org.netbeans.lib.awtextra.AbsoluteConstraints(835, 10, 190, -1));

        jLabel11.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel11.setText("Chức Vụ:");
        jPanel1.add(jLabel11, new org.netbeans.lib.awtextra.AbsoluteConstraints(730, 50, 100, -1));

        jLabel12.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel12.setText("Mã Nhân Viên:");
        jPanel1.add(jLabel12, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 10, 120, -1));

        jLabel13.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel13.setText("Lương Cơ Sở Áp Dụng:");
        jLabel13.setToolTipText("");
        jPanel1.add(jLabel13, new org.netbeans.lib.awtextra.AbsoluteConstraints(370, 205, 170, -1));

        jLabel15.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel15.setText("Lương Cơ Bản:");
        jPanel1.add(jLabel15, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 205, 120, -1));

        cmbHeSoLuong.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        cmbHeSoLuong.setForeground(new java.awt.Color(0, 99, 0));
        cmbHeSoLuong.setEnabled(false);
        cmbHeSoLuong.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbHeSoLuongActionPerformed(evt);
            }
        });
        jPanel1.add(cmbHeSoLuong, new org.netbeans.lib.awtextra.AbsoluteConstraints(840, 130, 80, -1));

        jLabel16.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel16.setText("Hệ Số Lương:");
        jPanel1.add(jLabel16, new org.netbeans.lib.awtextra.AbsoluteConstraints(730, 130, 120, -1));

        lblLuongCoSo.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        lblLuongCoSo.setForeground(new java.awt.Color(0, 99, 0));
        lblLuongCoSo.setText("0");
        lblLuongCoSo.setToolTipText("");
        jPanel1.add(lblLuongCoSo, new org.netbeans.lib.awtextra.AbsoluteConstraints(530, 205, 190, 20));

        jLabel14.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel14.setText("Địa chỉ:");
        jLabel14.setToolTipText("");
        jPanel1.add(jLabel14, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 170, 120, -1));

        lblLuongCoBan.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        lblLuongCoBan.setForeground(new java.awt.Color(0, 99, 0));
        lblLuongCoBan.setText("0");
        lblLuongCoBan.setToolTipText("");
        jPanel1.add(lblLuongCoBan, new org.netbeans.lib.awtextra.AbsoluteConstraints(140, 205, 150, 20));

        cmbPhongBan.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        cmbPhongBan.setForeground(new java.awt.Color(0, 99, 0));
        cmbPhongBan.setEnabled(false);
        cmbPhongBan.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbPhongBanActionPerformed(evt);
            }
        });
        jPanel1.add(cmbPhongBan, new org.netbeans.lib.awtextra.AbsoluteConstraints(480, 90, 190, -1));

        jLabel17.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel17.setText("Email:");
        jPanel1.add(jLabel17, new org.netbeans.lib.awtextra.AbsoluteConstraints(370, 50, 120, -1));

        dchNgaySinh.setDateFormatString("dd/MM/yyyy");
        dchNgaySinh.setEnabled(false);
        jPanel1.add(dchNgaySinh, new org.netbeans.lib.awtextra.AbsoluteConstraints(140, 90, 190, -1));

        dchNgayVaoLam.setDateFormatString("dd/MM/yyyy");
        dchNgayVaoLam.setEnabled(false);
        jPanel1.add(dchNgayVaoLam, new org.netbeans.lib.awtextra.AbsoluteConstraints(480, 130, 190, -1));

        lblThongBao.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        lblThongBao.setForeground(new java.awt.Color(255, 0, 0));
        lblThongBao.setToolTipText("");
        jPanel1.add(lblThongBao, new org.netbeans.lib.awtextra.AbsoluteConstraints(780, 160, 360, 30));

        add(jPanel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(154, 50, 1150, 250));

        jLabel5.setFont(new java.awt.Font("Microsoft YaHei UI", 1, 24)); // NOI18N
        jLabel5.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel5.setText("Thông Tin Nhân Viên");
        add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(4, 0, 1300, 50));

        jLabel1.setFont(new java.awt.Font("Segoe UI", 2, 14)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(0, 99, 0));
        jLabel1.setText("Danh sách phòng ban:");
        jLabel1.setToolTipText("");
        add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 20, 150, -1));
    }// </editor-fold>//GEN-END:initComponents

    private void cmbCapBacActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbCapBacActionPerformed
        kiemTraCmbTruongPhong();
        doDuLieuHeSoLuong();
    }//GEN-LAST:event_cmbCapBacActionPerformed

    private void btnLamMoiActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLamMoiActionPerformed
        if (lamMoiBtn()) {
            lamMoiDong();
            lamMoiBang();
            doDuLieu();
        }
    }//GEN-LAST:event_btnLamMoiActionPerformed

    private void tblNhanVienMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblNhanVienMouseClicked
        layDuLieuLenText();
    }//GEN-LAST:event_tblNhanVienMouseClicked

    private void tblNhanVienKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tblNhanVienKeyReleased
        if (evt.getKeyCode() == KeyEvent.VK_UP || evt.getKeyCode() == KeyEvent.VK_DOWN) {
            layDuLieuLenText();
        }
    }//GEN-LAST:event_tblNhanVienKeyReleased

    private void lstPhongBanMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lstPhongBanMouseClicked
        int hang = lstPhongBan.getSelectedIndex();
        if (hang != -1) {
            dtmNhanVien.setRowCount(0);
            doDuLieuNhanVien(nhanVienHanhChanh_Dao.getDanhSachNhanVienHanhChanhTheoPhongBan(phongBans.get(hang).getMaPhongBan()));
        }
    }//GEN-LAST:event_lstPhongBanMouseClicked

    private void lstPhongBanKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_lstPhongBanKeyReleased
        if (evt.getKeyCode() == KeyEvent.VK_UP || evt.getKeyCode() == KeyEvent.VK_DOWN) {
            int hang = lstPhongBan.getSelectedIndex();
            if (hang != -1) {
                dtmNhanVien.setRowCount(0);
                doDuLieuNhanVien(nhanVienHanhChanh_Dao.getDanhSachNhanVienHanhChanhTheoPhongBan(phongBans.get(hang).getMaPhongBan()));
            }
        }
    }//GEN-LAST:event_lstPhongBanKeyReleased

    private void btnThemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnThemActionPerformed
        xuLyThem();
    }//GEN-LAST:event_btnThemActionPerformed

    private void cmbHeSoLuongActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbHeSoLuongActionPerformed
        tinhLuongCoBan();
    }//GEN-LAST:event_cmbHeSoLuongActionPerformed

    private void btnXoaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnXoaActionPerformed
        xuLyXoa();
    }//GEN-LAST:event_btnXoaActionPerformed

    private void btnCapNhatActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCapNhatActionPerformed
        xuLyCapNhat();
    }//GEN-LAST:event_btnCapNhatActionPerformed

    private void cmbPhongBanActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbPhongBanActionPerformed
        if (cmbCapBac.getSelectedIndex() != -1) {
            kiemTraCmbTruongPhong();
        }
    }//GEN-LAST:event_cmbPhongBanActionPerformed
    private void initCommon() throws SQLException {
        ConnectDB.getInstance();
        ConnectDB.connect();
        df = new DecimalFormat("#,##0"); // Số lẻ số # để hiển thị đủ chữ số thập phân
        dinhDangNgay = new SimpleDateFormat("dd/MM/yyyy");
        nhanVienHanhChanh_Dao = new NhanVienHanhChanh_Dao();
        phongBan_Dao = new PhongBan_Dao();
        capBac_Dao = new CapBac_Dao();
        capBacs = capBac_Dao.getDanhSachCapBacHanhChinh();
        phongBans = phongBan_Dao.getDanhSachPhongBan();
        lblLuongCoSo.setText(df.format(capBacs.get(0).getBacLuongs().get(0).getLuongCoSo()) + "VND");
        doDuLieu();
    }

    private void setTable() {
        //setTable ở đây
        dtmNhanVien = new DefaultTableModel(
                new Object[][]{},
                new String[]{
                    "Mã nhân viên", "Họ và tên", "Giới tính", "Ngày sinh", "Ngày vào làm", "Số điện thoại", "Địa chỉ", "Mail", "Ngoại ngữ", "Phòng ban", "Cấp bậc", "Chức vụ", "Hệ số lương", "Lương cơ bản"
                }
        ) {
            Class[] types = new Class[]{
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean[]{
                false, false, false, false, false, false, false, false, false, false, false, false, false, false
            };

            @Override
            public Class getColumnClass(int columnIndex) {
                return types[columnIndex];
            }

            @Override
            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit[columnIndex];
            }
        };
        tblNhanVien.setModel(dtmNhanVien);

        DefaultTableCellRenderer center = new DefaultTableCellRenderer();
        center.setHorizontalAlignment(DefaultTableCellRenderer.CENTER);
        tblNhanVien.getTableHeader().setBackground(new java.awt.Color(50, 205, 50));
        tblNhanVien.getColumnModel().getColumn(0).setPreferredWidth(90);
        tblNhanVien.getColumnModel().getColumn(1).setPreferredWidth(128);
        tblNhanVien.getColumnModel().getColumn(2).setPreferredWidth(70);
        tblNhanVien.getColumnModel().getColumn(3).setPreferredWidth(95);
        tblNhanVien.getColumnModel().getColumn(4).setPreferredWidth(95);
        tblNhanVien.getColumnModel().getColumn(5).setPreferredWidth(95);
        tblNhanVien.getColumnModel().getColumn(6).setPreferredWidth(270);
        tblNhanVien.getColumnModel().getColumn(7).setPreferredWidth(200);
        tblNhanVien.getColumnModel().getColumn(8).setPreferredWidth(95);
        tblNhanVien.getColumnModel().getColumn(9).setPreferredWidth(150);
        tblNhanVien.getColumnModel().getColumn(10).setPreferredWidth(128);
        tblNhanVien.getColumnModel().getColumn(11).setPreferredWidth(115);
        tblNhanVien.getColumnModel().getColumn(12).setPreferredWidth(95);
        tblNhanVien.getColumnModel().getColumn(13).setPreferredWidth(95);
        tblNhanVien.getColumnModel().getColumn(0).setCellRenderer(center);
        tblNhanVien.getColumnModel().getColumn(2).setCellRenderer(center);
        tblNhanVien.getColumnModel().getColumn(3).setCellRenderer(center);
        tblNhanVien.getColumnModel().getColumn(4).setCellRenderer(center);
        tblNhanVien.getColumnModel().getColumn(5).setCellRenderer(center);
        tblNhanVien.getColumnModel().getColumn(12).setCellRenderer(center);
        //set Jlist
        dlmPhongBan = new DefaultListModel();
        lstPhongBan.setModel(dlmPhongBan);
    }

    public void lamMoiDong() {
        txtMa.setText("");
        txtTen.setText("");
        dchNgaySinh.setDate(null);
        dchNgayVaoLam.setDate(null);
        txtChucVu.setText("");
        txtDiaChi.setText("");
        txtDienThoai.setText("");
        txtMail.setText("");
        txtNgoaiNgu.setText("");
        lblLuongCoBan.setText("");
    }

    public boolean lamMoiBtn() {
        if (btnCapNhat.getText().equalsIgnoreCase("Xác Nhận") || btnThem.getText().equalsIgnoreCase("Xác Nhận")) {
            int i = JOptionPane.showConfirmDialog(this, "Bạn có muốn thoát khỏi chỉnh sửa không", "Xác nhận", JOptionPane.YES_NO_OPTION);
            if (i == JOptionPane.YES_OPTION) {
                btnThem.setEnabled(true);
                btnCapNhat.setEnabled(true);
                btnXoa.setEnabled(true);
                btnThem.setText("Thêm");
                btnCapNhat.setText("Cập Nhật");
                dongNhapDuLieu();
                return true;
            }
            return false;
        }
        return true;
    }

    public void lamMoiBang() {
        dtmNhanVien.setRowCount(0);
        dlmPhongBan.clear();
        cmbPhongBan.removeAllItems();
        cmbCapBac.removeAllItems();
    }

    public void layDuLieuLenText() {
        try {
            // Lấy vị trí hàng được chọn trong bảng và cho dữ liệu lên textfield
            int hang = tblNhanVien.getSelectedRow();
            if (hang != -1 && btnThem.getText().equalsIgnoreCase("Thêm") && btnCapNhat.getText().equalsIgnoreCase("Cập Nhật")) {
                txtMa.setText((String) tblNhanVien.getValueAt(hang, 0));
                txtTen.setText((String) tblNhanVien.getValueAt(hang, 1));
                cmbGioiTinh.setSelectedItem((String) tblNhanVien.getValueAt(hang, 2));
                dchNgaySinh.setDate(dinhDangNgay.parse((String) tblNhanVien.getValueAt(hang, 3)));
                dchNgayVaoLam.setDate(dinhDangNgay.parse((String) tblNhanVien.getValueAt(hang, 4)));
                txtDienThoai.setText((String) tblNhanVien.getValueAt(hang, 5));
                txtDiaChi.setText((String) tblNhanVien.getValueAt(hang, 6));
                txtMail.setText((String) tblNhanVien.getValueAt(hang, 7));
                txtNgoaiNgu.setText((String) tblNhanVien.getValueAt(hang, 8));
                cmbPhongBan.setSelectedItem((String) tblNhanVien.getValueAt(hang, 9));
                cmbCapBac.setSelectedItem((String) tblNhanVien.getValueAt(hang, 10));
                txtChucVu.setText((String) tblNhanVien.getValueAt(hang, 11));
                cmbHeSoLuong.addItem((String.valueOf(tblNhanVien.getValueAt(hang, 12))));
                lblLuongCoBan.setText(String.valueOf(tblNhanVien.getValueAt(hang, 13)));
            }
        } catch (ParseException ex) {
            ex.printStackTrace();
        }
    }

    public void doDuLieuNhanVien(List<NhanVienHanhChanh> nhanVienHanhChanhs) {
        for (NhanVienHanhChanh nVien : nhanVienHanhChanhs) {
            Object[] objects = {nVien.getMaNhanVienHanhChanh(), nVien.getHoVaTen(),
                nVien.isGioiTinh() ? "Nam" : "Nữ",
                dinhDangNgay.format(nVien.getNgaySinh()),
                dinhDangNgay.format(nVien.getNgayVaoLam()),
                nVien.getDienThoai(),
                nVien.getDiaChi(),
                nVien.getEmail(),
                nVien.getNgoaiNgu(),
                nVien.getPhongBan().getTenPhongBan(),
                nVien.getCapBac(),
                nVien.getChucVu(),
                nVien.getHeSoLuong(),
                df.format(nVien.getLuongCoBan()) + "VND"
            };
            dtmNhanVien.addRow(objects);
        }
    }

    public void doDuLieuPhongBan() {
        for (PhongBan pBan : phongBans) {
            String tenPhongBan = pBan.getTenPhongBan();
            dlmPhongBan.addElement(tenPhongBan);
            cmbPhongBan.addItem(tenPhongBan);
        }
        cmbPhongBan.setSelectedIndex(-1);
    }

    public void doDuLieuHeSoLuong() {
        cmbHeSoLuong.removeAllItems();
        if (cmbCapBac.getSelectedIndex() != -1 && (btnThem.getText().equalsIgnoreCase("Xác Nhận") || btnCapNhat.getText().equalsIgnoreCase("Xác Nhận"))) {
            CapBac cBac = capBacs.get(cmbCapBac.getSelectedIndex());
            for (BacLuong bLuong : cBac.getBacLuongs()) {
                cmbHeSoLuong.addItem(String.valueOf(bLuong.getHeSoLuong()));
            }
        }
    }

    public void doDuLieuCapBac() {
        for (CapBac cBac : capBacs) {
            String tenCapBac = cBac.getTenCapBac();
            cmbCapBac.addItem(tenCapBac);
        }
        cmbCapBac.setSelectedIndex(-1);
    }

    public void doDuLieu() {
        doDuLieuNhanVien(nhanVienHanhChanh_Dao.getDanhSachNhanVienHanhChanh());
        doDuLieuPhongBan();
        doDuLieuCapBac();
    }

    private void tinhLuongCoBan() {
        if (btnThem.getText().equalsIgnoreCase("Xác Nhận") || btnCapNhat.getText().equalsIgnoreCase("Xác Nhận")) {
            if (cmbCapBac.getSelectedIndex() != -1 && cmbHeSoLuong.getSelectedIndex() != -1) {
                CapBac cBac = capBacs.get(cmbCapBac.getSelectedIndex());
                BacLuong bLuong = cBac.getBacLuongs().get(cmbHeSoLuong.getSelectedIndex());
                luongCoBan = bLuong.getLuongCoSo() * bLuong.getHeSoLuong();
                lblLuongCoBan.setText(df.format(luongCoBan) + "VND");
            } else {
                lblLuongCoBan.setText("");
            }
        }
    }

    private void chonDuLieuRongCmb() {
        cmbPhongBan.setSelectedIndex(-1);
        cmbCapBac.setSelectedIndex(-1);
    }

    private void xuLyThem() {
        if (btnThem.getText().equalsIgnoreCase("Thêm")) {
            btnThem.setText("Xác Nhận");
            btnCapNhat.setEnabled(false);
            btnXoa.setEnabled(false);
            lamMoiDong();
            chonDuLieuRongCmb();
            moNhapDuLieu();
            txtMa.setText(nhanVienHanhChanh_Dao.layMaTuDongNhanVien());
        } else {
            if (kiemTraDuLieu()) {
                if (themNhanVien()) {
                    dongNhapDuLieu();
                    btnCapNhat.setEnabled(true);
                    btnXoa.setEnabled(true);
                    btnThem.setText("Thêm");
                }
            }
        }
    }

    private void xuLyXoa() {
        int hang = tblNhanVien.getSelectedRow();
        if (hang != -1) {
            int i = JOptionPane.showConfirmDialog(this, "Xác Nhận Xóa Nhân Viên", "Xác nhận", JOptionPane.YES_NO_OPTION);
            if (i == JOptionPane.YES_OPTION) {
                String maNhanVien = (String) tblNhanVien.getValueAt(hang, 0);
                if (nhanVienHanhChanh_Dao.xoaNhanVienHanhChanh(maNhanVien)) {
                    JOptionPane.showMessageDialog(this, "Xóa nhân viên thành công");
                    dtmNhanVien.removeRow(hang);
                } else {
                    JOptionPane.showMessageDialog(this, "Xóa nhân viên thất bại");
                }
            }
        } else {
            JOptionPane.showMessageDialog(this, "Bạn chưa chọn dòng cần xóa!");
        }
    }

    private void xuLyCapNhat() {
        int[] hang = tblNhanVien.getSelectedRows();
        if (hang.length == 1) {
            if (btnCapNhat.getText().equalsIgnoreCase("Cập Nhật")) {
                maPhongBan = phongBans.get(cmbPhongBan.getSelectedIndex()).getMaPhongBan();
                capBac = (String) cmbCapBac.getSelectedItem();
                btnThem.setEnabled(false);
                btnXoa.setEnabled(false);
                btnCapNhat.setText("Xác Nhận");
                doDuLieuHeSoLuong();
                moNhapDuLieu();
            } else {
                if (kiemTraDuLieu()) {
                    if (capNhatNhanVien()) {
                        kiemTraCapBac(maPhongBan, capBac);
                        dongNhapDuLieu();
                        btnCapNhat.setText("Cập Nhật");
                        btnThem.setEnabled(true);
                        btnXoa.setEnabled(true);
                    }
                }
            }
        } else if (hang.length == 0) {
            JOptionPane.showMessageDialog(this, "Bạn chưa chọn nhân viên cần cập nhật!");
        } else {
            JOptionPane.showMessageDialog(this, "1 lần chỉ được cập nhật một nhân viên!");
        }
    }

    private boolean capNhatNhanVien() {
        int i = JOptionPane.showConfirmDialog(this, "Xác Nhận Cập Nhật Nhân Viên", "Xác nhận", JOptionPane.YES_NO_OPTION);
        if (i == JOptionPane.YES_OPTION) {
            NhanVienHanhChanh nVien = new NhanVienHanhChanh("", txtTen.getText(),
                    dchNgaySinh.getDate(),
                    ((String) cmbGioiTinh.getSelectedItem()).equals("Nam"),
                    txtDiaChi.getText(),
                    txtDienThoai.getText(),
                    txtMail.getText(),
                    dchNgayVaoLam.getDate(),
                    txtMa.getText(),
                    txtChucVu.getText(),
                    txtNgoaiNgu.getText(),
                    capBacs.get(cmbCapBac.getSelectedIndex()).getMaCapBac(),
                    phongBans.get(cmbPhongBan.getSelectedIndex()),
                    luongCoBan,
                    Float.parseFloat((String) cmbHeSoLuong.getSelectedItem()));

            if (nhanVienHanhChanh_Dao.capNhatNhanVien(nVien)) {
                int hang = dtmNhanVien.getRowCount();
                for (int j = 0; j < hang; j++) {
                    if (((String) dtmNhanVien.getValueAt(j, 0)).equalsIgnoreCase(txtMa.getText())) {
                        dtmNhanVien.setValueAt(txtMa.getText(), j, 0);
                        dtmNhanVien.setValueAt(txtTen.getText(), j, 1);
                        dtmNhanVien.setValueAt(cmbGioiTinh.getSelectedItem(), j, 2);
                        dtmNhanVien.setValueAt(dinhDangNgay.format(dchNgaySinh.getDate()), j, 3);
                        dtmNhanVien.setValueAt(dinhDangNgay.format(dchNgayVaoLam.getDate()), j, 4);
                        dtmNhanVien.setValueAt(txtDienThoai.getText(), j, 5);
                        dtmNhanVien.setValueAt(txtDiaChi.getText(), j, 6);
                        dtmNhanVien.setValueAt(txtMail.getText(), j, 7);
                        dtmNhanVien.setValueAt(txtNgoaiNgu.getText(), j, 8);
                        dtmNhanVien.setValueAt(cmbPhongBan.getSelectedItem(), j, 9);
                        dtmNhanVien.setValueAt(cmbCapBac.getSelectedItem(), j, 10);
                        dtmNhanVien.setValueAt(txtChucVu.getText(), j, 11);
                        dtmNhanVien.setValueAt(cmbHeSoLuong.getSelectedItem(), j, 12);
                        dtmNhanVien.setValueAt(lblLuongCoBan.getText(), j, 13);
                    }
                }
                JOptionPane.showMessageDialog(this, "Cập nhật thành công!");
                return true;
            } else {
                JOptionPane.showMessageDialog(this, "Cập nhật thất bại!");
                return false;
            }
        }
        return false;
    }

    private boolean themNhanVien() {
        int i = JOptionPane.showConfirmDialog(this, "Xác Nhận Thêm Nhân Viên", "Xác nhận", JOptionPane.YES_NO_OPTION);
        if (i == JOptionPane.YES_OPTION) {
            NhanVienHanhChanh nVien = new NhanVienHanhChanh("", txtTen.getText(),
                    dchNgaySinh.getDate(),
                    ((String) cmbGioiTinh.getSelectedItem()).equals("Nam"),
                    txtDiaChi.getText(),
                    txtDienThoai.getText(),
                    txtMail.getText(),
                    dchNgayVaoLam.getDate(),
                    txtMa.getText(),
                    txtChucVu.getText(),
                    txtNgoaiNgu.getText(),
                    capBacs.get(cmbCapBac.getSelectedIndex()).getMaCapBac(),
                    phongBans.get(cmbPhongBan.getSelectedIndex()),
                    luongCoBan,
                    Float.parseFloat((String) cmbHeSoLuong.getSelectedItem()));

            if (nhanVienHanhChanh_Dao.themNhanVien(nVien)) {
                Object[] objects = {txtMa.getText(), txtTen.getText(),
                    cmbGioiTinh.getSelectedItem(),
                    dinhDangNgay.format(dchNgaySinh.getDate()),
                    dinhDangNgay.format(dchNgayVaoLam.getDate()),
                    txtDienThoai.getText(),
                    txtDiaChi.getText(),
                    txtMail.getText(),
                    txtNgoaiNgu.getText(),
                    cmbPhongBan.getSelectedItem(),
                    cmbCapBac.getSelectedItem(),
                    txtChucVu.getText(),
                    cmbHeSoLuong.getSelectedItem(),
                    lblLuongCoBan.getText()
                };
                dtmNhanVien.addRow(objects);
                if (cmbCapBac.getSelectedItem().equals("Trưởng Phòng")) {
                    phongBan_Dao.capNhatTruongPhong(txtMa.getText(), phongBans.get(cmbPhongBan.getSelectedIndex()).getMaPhongBan());
                }
                JOptionPane.showMessageDialog(this, "Thêm thành công!");
                return true;
            } else {
                JOptionPane.showMessageDialog(this, "Thêm thất bại!");
                return false;
            }
        }
        return false;
    }

    public void kiemTraCapBac(String maPhongBan, String capBac) {
        String maPhongBanHt = phongBans.get(cmbPhongBan.getSelectedIndex()).getMaPhongBan();
        String capBacHt = (String) cmbCapBac.getSelectedItem();
        if (!capBac.equalsIgnoreCase(capBacHt) || !maPhongBan.equalsIgnoreCase(maPhongBanHt)) {
            String maTruongPhong = phongBan_Dao.getMaTruongPhong(maPhongBan);
            if (maTruongPhong != null) {
                if (maTruongPhong.equalsIgnoreCase(txtMa.getText())) {
                    phongBan_Dao.capNhatTruongPhong(maPhongBan);
                }
            }
            if (capBacHt.equalsIgnoreCase("Trưởng Phòng")) {
                phongBan_Dao.capNhatTruongPhong(txtMa.getText(), maPhongBanHt);
            }
        }
    }

    public void kiemTraCmbTruongPhong() {
        if (cmbPhongBan.getSelectedIndex() != -1 && (btnThem.getText().equalsIgnoreCase("Xác Nhận") || btnCapNhat.getText().equalsIgnoreCase("Xác Nhận")) && cmbCapBac.getSelectedItem().equals("Trưởng Phòng")) {
            if (phongBan_Dao.getMaTruongPhong(phongBans.get(cmbPhongBan.getSelectedIndex()).getMaPhongBan()) != null) {
                JOptionPane.showMessageDialog(this, "Phòng ban này đã có trưởng phòng!");
                cmbCapBac.setSelectedItem("Nhân Viên Hành Chính");
            }
        }
    }

    private void moNhapDuLieu() {
        txtTen.setEditable(true);
        cmbGioiTinh.setEnabled(true);
        dchNgaySinh.setEnabled(true);
        dchNgayVaoLam.setEnabled(true);
        txtDienThoai.setEditable(true);
        txtDiaChi.setEditable(true);
        txtMail.setEditable(true);
        txtNgoaiNgu.setEditable(true);
        cmbPhongBan.setEnabled(true);
        cmbCapBac.setEnabled(true);
        txtChucVu.setEditable(true);
        cmbHeSoLuong.setEnabled(true);
    }

    private void dongNhapDuLieu() {
        txtTen.setEditable(false);
        cmbGioiTinh.setEnabled(false);
        dchNgaySinh.setEnabled(false);
        dchNgayVaoLam.setEnabled(false);
        txtDienThoai.setEditable(false);
        txtDiaChi.setEditable(false);
        txtMail.setEditable(false);
        txtNgoaiNgu.setEditable(false);
        cmbPhongBan.setEnabled(false);
        cmbCapBac.setEnabled(false);
        txtChucVu.setEditable(false);
        cmbHeSoLuong.setEnabled(false);
    }

    private boolean kiemTraRong(JComponent component, String thongBao) {
        if (component instanceof JTextField) {
            JTextField textField = (JTextField) component;
            if (KiemTraChuoi.isNotEmpty(textField.getText())) {
                textField.requestFocus();
                lblThongBao.setText(thongBao);
                return true;
            }
        } else if (component instanceof JComboBox) {
            JComboBox<?> comboBox = (JComboBox<?>) component;
            if (comboBox.getSelectedIndex() == -1) {
                comboBox.requestFocus();
                lblThongBao.setText(thongBao);
                return true;
            }
        } else if (component instanceof JDateChooser) {
            JDateChooser dateChooser = (JDateChooser) component;
            if (dateChooser.getDate() == null) {
                dateChooser.requestFocus();
                lblThongBao.setText(thongBao);
                return true;
            }
        }
        return false;
    }

    private boolean kiemTraDuLieuRong() {
        if (kiemTraRong(txtTen, "*Không được để dữ liệu trống!")
                || kiemTraRong(dchNgaySinh, "*Không được để dữ liệu trống!")
                || kiemTraRong(cmbGioiTinh, "*Không được để dữ liệu trống!")
                || kiemTraRong(txtDiaChi, "*Không được để dữ liệu trống!")
                || kiemTraRong(txtDienThoai, "*Không được để dữ liệu trống!")
                || kiemTraRong(txtMail, "*Không được để dữ liệu trống!")
                || kiemTraRong(cmbPhongBan, "*Không được để dữ liệu trống!")
                || kiemTraRong(dchNgayVaoLam, "*Không được để dữ liệu trống!")
                || kiemTraRong(txtNgoaiNgu, "*Không được để dữ liệu trống!")
                || kiemTraRong(txtChucVu, "*Không được để dữ liệu trống!")
                || kiemTraRong(cmbCapBac, "*Không được để dữ liệu trống!")
                || kiemTraRong(cmbHeSoLuong, "*Không được để dữ liệu trống!")) {
            return false;
        }
        lblThongBao.setText("");
        return true;
    }

    private boolean kiemTraDuLieu() {
        if (kiemTraDuLieuRong()) {
            if (!KiemTraChuoi.ktTen(txtTen.getText().trim())) {
                txtTen.requestFocus();
                lblThongBao.setText("*Tên sai định dạng");
                return false;
            } else if (!KiemTraChuoi.ktDateFormat(dinhDangNgay.format(dchNgaySinh.getDate()))) {
                dchNgaySinh.requestFocus();
                lblThongBao.setText("*Sai định dạng ngày");
                return false;
            } else if (!KiemTraChuoi.ktDiaChi(txtDiaChi.getText().trim())) {
                txtDiaChi.requestFocus();
                lblThongBao.setText("*Địa chỉ sai định dạng");
                return false;
            } else if (!KiemTraChuoi.ktSDT(txtDienThoai.getText().trim())) {
                txtDienThoai.requestFocus();
                lblThongBao.setText("*Số điện thoại sai định dạng");
                return false;
            } else if (!KiemTraChuoi.ktEmail(txtMail.getText().trim())) {
                txtMail.requestFocus();
                lblThongBao.setText("*Mail sai định dạng");
                return false;
            } else if (!KiemTraChuoi.ktDateFormat(dinhDangNgay.format(dchNgaySinh.getDate()))) {
                dchNgayVaoLam.requestFocus();
                lblThongBao.setText("*Ngày vào làm sai định dạng");
                return false;
            }
            lblThongBao.setText("");
            return true;
        }
        return false;
    }

    private DefaultTableModel dtmNhanVien;
    private DefaultListModel dlmPhongBan;
    private SimpleDateFormat dinhDangNgay;
    private DecimalFormat df;
    private float luongCoBan;
    private List<CapBac> capBacs;
    private List<PhongBan> phongBans;
    private CapBac_Dao capBac_Dao;
    private PhongBan_Dao phongBan_Dao;
    private NhanVienHanhChanh_Dao nhanVienHanhChanh_Dao;
    private String maPhongBan;
    private String capBac;
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnCapNhat;
    private javax.swing.JButton btnLamMoi;
    private javax.swing.JButton btnThem;
    private javax.swing.JButton btnXoa;
    private javax.swing.JComboBox<String> cmbCapBac;
    private javax.swing.JComboBox<String> cmbGioiTinh;
    private javax.swing.JComboBox<String> cmbHeSoLuong;
    private javax.swing.JComboBox<String> cmbPhongBan;
    private com.toedter.calendar.JDateChooser dchNgaySinh;
    private com.toedter.calendar.JDateChooser dchNgayVaoLam;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JLabel lblLuongCoBan;
    private javax.swing.JLabel lblLuongCoSo;
    private javax.swing.JLabel lblThongBao;
    private javax.swing.JList<String> lstPhongBan;
    private javax.swing.JTable tblNhanVien;
    private javax.swing.JTextField txtChucVu;
    private javax.swing.JTextField txtDiaChi;
    private javax.swing.JTextField txtDienThoai;
    private javax.swing.JTextField txtMa;
    private javax.swing.JTextField txtMail;
    private javax.swing.JTextField txtNgoaiNgu;
    private javax.swing.JTextField txtTen;
    // End of variables declaration//GEN-END:variables

}
